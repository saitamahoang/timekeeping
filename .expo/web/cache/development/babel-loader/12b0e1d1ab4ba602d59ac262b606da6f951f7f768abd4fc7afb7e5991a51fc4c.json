{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport Background from \"../components/Background\";\nimport Logo from \"../components/Logo\";\nimport Header from \"../components/Header\";\nimport Paragraph from \"../components/Paragraph\";\nimport Button from \"../components/Button\";\nimport { useRoute } from '@react-navigation/native';\nexport default function Dashboard(_ref) {\n  var _route$params,\n    _this = this;\n  var navigation = _ref.navigation;\n  var route = useRoute();\n  var token = (_route$params = route.params) == null ? void 0 : _route$params.token;\n  var onCheckPressed = function onCheckPressed(typecheck) {\n    var handleCheck = function handleCheck() {\n      var response, data;\n      return _regeneratorRuntime.async(function handleCheck$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch('http://10.0.114.185:1001/check', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                username: username.value,\n                type: typecheck,\n                token: _this.token\n              })\n            }));\n          case 3:\n            response = _context.sent;\n            if (!response.ok) {\n              _context.next = 11;\n              break;\n            }\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(response.json());\n          case 7:\n            data = _context.sent;\n            navigation.reset({\n              index: 0,\n              routes: [{\n                name: 'Dashboard',\n                params: {\n                  token: data.token\n                }\n              }]\n            });\n            _context.next = 12;\n            break;\n          case 11:\n            toggleModal();\n          case 12:\n            _context.next = 18;\n            break;\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](0);\n            toggleModal();\n            console.error('Error:', _context.t0);\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }, null, null, [[0, 14]], Promise);\n    };\n    handleCheck(typecheck);\n  };\n  return React.createElement(Background, null, React.createElement(Logo, null), React.createElement(Header, null, \"Welcome \\uD83D\\uDCAB\"), React.createElement(Paragraph, null, \"Congratulations you are logged in.\"), React.createElement(Button, {\n    mode: \"contained\",\n    onPress: onCheckPressed('i')\n  }, \"Check In\"), React.createElement(Button, {\n    mode: \"contained\"\n  }, \"Check Out\"), React.createElement(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    }\n  }, React.createElement(Button, {\n    title: \"Show Modal\",\n    onPress: toggleModal\n  }), React.createElement(Modal, {\n    animationType: \"slide\",\n    transparent: true,\n    visible: modalVisible,\n    onRequestClose: function onRequestClose() {\n      setModalVisible(!modalVisible);\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      backgroundColor: 'rgba(0, 0, 0, 0.5)'\n    }\n  }, React.createElement(View, {\n    style: {\n      backgroundColor: 'white',\n      padding: 20\n    }\n  }, React.createElement(Text, null, \"Login fail\"), React.createElement(Button, {\n    title: \"Close\",\n    onPress: toggleModal\n  }, \"Close\"))))));\n}","map":{"version":3,"names":["React","Background","Logo","Header","Paragraph","Button","useRoute","Dashboard","_ref","_route$params","_this","navigation","route","token","params","onCheckPressed","typecheck","handleCheck","response","data","_regeneratorRuntime","async","handleCheck$","_context","prev","next","awrap","fetch","method","headers","body","JSON","stringify","username","value","type","sent","ok","json","reset","index","routes","name","toggleModal","t0","console","error","stop","Promise","createElement","mode","onPress","View","style","flex","justifyContent","alignItems","title","Modal","animationType","transparent","visible","modalVisible","onRequestClose","setModalVisible","backgroundColor","padding","Text"],"sources":["D:/source-personal/hoc expo/timekeeping/timekeeping/src/screens/Dashboard.js"],"sourcesContent":["import React from 'react'\nimport Background from '../components/Background'\nimport Logo from '../components/Logo'\nimport Header from '../components/Header'\nimport Paragraph from '../components/Paragraph'\nimport Button from '../components/Button'\nimport { useRoute } from '@react-navigation/native'\n\nexport default function Dashboard({ navigation }) {\n  const route = useRoute();\n  const token = route.params?.token;\n  const onCheckPressed = (typecheck) => {\n\n    const handleCheck = async () => {\n      try {\n       \n        const response = await fetch('http://10.0.114.185:1001/check', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ username: username.value, type: typecheck, token: this.token }),\n        });\n  \n        if (response.ok) {\n          const data = await response.json();\n          // Handle successful login (e.g., store authentication token)\n          // For example, you might store the token in AsyncStorage\n          // AsyncStorage.setItem('authToken', token);\n           navigation.reset({\n            index: 0,\n            routes: [{ name: 'Dashboard', params: {token: data.token} }],\n          })\n        } else {\n          toggleModal();\n          // Handle login failure (e.g., incorrect credentials)\n        //  Alert.alert('Login failed', 'Invalid username or password');\n        }\n      } catch (error) {\n        toggleModal();\n        console.error('Error:', error);\n       // Alert.alert('Error', 'Something went wrong');\n      }\n    };\n    handleCheck(typecheck);\n\n  }\n  return (\n    <Background>\n      <Logo />\n      <Header>Welcome ðŸ’«</Header>\n      <Paragraph>\n        Congratulations you are logged in.\n      </Paragraph>\n\n      <Button mode=\"contained\" onPress={onCheckPressed('i')}>\n        Check In\n      </Button>\n      <Button mode=\"contained\">\n        Check Out\n      </Button>\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Button title=\"Show Modal\" onPress={toggleModal} />\n      <Modal\n        animationType=\"slide\" // You can change the animation type (slide, fade, none)\n        transparent={true}\n        visible={modalVisible}\n        onRequestClose={() => {\n          setModalVisible(!modalVisible);\n        }}\n      >\n        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: 'rgba(0, 0, 0, 0.5)' }}>\n          <View style={{ backgroundColor: 'white', padding: 20 }}>\n            <Text>Login fail</Text>\n            <Button title=\"Close\" onPress={toggleModal} >Close</Button>\n          </View>\n        </View>\n      </Modal>\n    </View>\n    </Background>\n  )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}